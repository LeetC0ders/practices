/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package practices;

import practices.di.AppComponent;
import practices.di.DaggerAppComponent;
import practices.di.DaggerDataStructureComponent;

public class App {

    private static int problemCounter = 0;
    private static int algoCounter = 0;

    private AppComponent appComponent = DaggerAppComponent.builder().dataStructureComponent(
            DaggerDataStructureComponent.create()).build();

    public String getGreeting() {
        return "Hello, welcome to LeetCode practice";
    }
    private AppComponent getAppComponent() { return appComponent; }

    public static void main(String[] args) {
        App app = new App();

        System.out.println(app.getGreeting());
        System.out.println();

        printProblemSolved(app.getAppComponent().provideFizzBuzz().getName());
        printProblemSolved(app.getAppComponent().provideTwoSum().getName());
        printProblemSolved(app.getAppComponent().provideAddTwoNumbers().getName());

        System.out.println();

        printProblemSolvedPendingTest(app.getAppComponent().provideLongestSubstringWithoutRepeatingCharacters().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideSplitStringToBalancedString().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideCountingBits().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideFindAllNumbersDisappearedInArr().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideBinaryTreeLevelOrderTraversal().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideReverseLinkedList().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideInvertBinaryTree().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideValidParentheses().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideMergeTwoSortedList().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideMaximumSizeSubarraySumEqualsK().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideBestTimeToBuyAndSellStock().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideVerifyingAnAlienDictionary().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideMergeSortedArray().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideAddStrings().getName());
        printProblemSolvedPendingTest(app.getAppComponent().provideTopKFrequentElements().getName());

        System.out.println();

        printAlgoSolvedPendingTest(app.getAppComponent().provideSelectionSort().getName());
        printAlgoSolvedPendingTest(app.getAppComponent().provideBubbleSort().getName());
    }

    private static void printAlgoSolved(String algoName) {
        System.out.println("Algo #" + algoCounter++ + " algo name: " + algoName + " completed.");
    }

    private static void printProblemSolved(String problemName) {
        System.out.println("Problem #" + problemCounter++ + " problem name: " + problemName + " completed.");
    }

    private static void printProblemSolvedPendingTest(String problemName) {
        System.out.println("*NEED unit test* Problem #" + problemCounter++ + " problem name: " + problemName + " completed.");
    }

    private static void printAlgoSolvedPendingTest(String algoName) {
        System.out.println("*NEED unit test* Algo #" + algoCounter++ + " algo name: " + algoName + " completed.");
    }
}
